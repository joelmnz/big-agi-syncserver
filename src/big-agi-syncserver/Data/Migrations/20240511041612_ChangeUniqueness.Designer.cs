// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using big_agi_syncserver.Data;

#nullable disable

namespace big_agi_syncserver.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240511041612_ChangeUniqueness")]
    partial class ChangeUniqueness
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("big_agi_syncserver.Data.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AutoTitle")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "autoTitle");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "created");

                    b.Property<string>("SyncKey")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "syncKey");

                    b.Property<string>("SystemPurposeId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "systemPurposeId");

                    b.Property<long>("Updated")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "updated");

                    b.Property<string>("UserTitle")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "userTitle");

                    b.HasKey("Id");

                    b.HasAlternateKey("SyncKey", "Id");

                    b.ToTable("Conversations");

                    b.HasAnnotation("Relational:JsonPropertyName", "conversation");
                });

            modelBuilder.Entity("big_agi_syncserver.Data.ConversationFolder", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "color");

                    b.Property<string>("Conversations")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.HasKey("Id");

                    b.ToTable("ConversationFolders");
                });

            modelBuilder.Entity("big_agi_syncserver.Data.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Avatar")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "avatar");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "conversationId");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "created");

                    b.Property<string>("PurposeId")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "purposeId");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "role");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "sender");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "text");

                    b.Property<int>("TokenCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "tokenCount");

                    b.Property<bool>("Typing")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "typing");

                    b.Property<long?>("Updated")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "updated");

                    b.HasKey("Id");

                    b.HasAlternateKey("ConversationId", "Id");

                    b.ToTable("Messages");

                    b.HasAnnotation("Relational:JsonPropertyName", "messages");
                });

            modelBuilder.Entity("big_agi_syncserver.Data.Message", b =>
                {
                    b.HasOne("big_agi_syncserver.Data.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("big_agi_syncserver.Data.Conversation", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
